name: Docker Health Check

on:
  schedule:
    - cron: '0 */6 * * *'  # Every 6 hours
  workflow_dispatch:  # Manual trigger
  push:
    paths:
      - 'docker-compose.yml'
      - 'docker-compose.prod.yml'
      - 'backend/Dockerfile'
      - 'frontend/Dockerfile'

jobs:
  docker-compose-test:
    name: Test Docker Compose Setup
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Create test environment file
      run: |
        cat > .env << EOF
        POSTGRES_DB=lma_db
        POSTGRES_USER=lma_user
        POSTGRES_PASSWORD=lma_password
        DATABASE_URL=postgresql://lma_user:lma_password@postgres:5432/lma_db
        REDIS_URL=redis://redis:6379/0
        N8N_BASE_URL=http://n8n:5678
        ENVIRONMENT=testing
        PORT=8000
        NODE_ENV=development
        VITE_API_URL=http://localhost:8000
        VITE_N8N_URL=http://localhost:5678
        EOF
    
    - name: Start services with Docker Compose
      run: |
        docker-compose up -d
        
        # Wait for services to be ready
        echo "Waiting for services to start..."
        sleep 60
    
    - name: Check service health
      run: |
        # Check PostgreSQL
        docker-compose exec -T postgres pg_isready -U lma_user -d lma_db
        
        # Check Redis
        docker-compose exec -T redis redis-cli ping
        
        # Check if n8n is responding
        curl -f http://localhost:5678 || echo "n8n not ready yet"
        
        # Check backend health endpoint
        timeout 30 bash -c 'until curl -f http://localhost:8000/health; do sleep 2; done'
        
        # Check frontend accessibility
        curl -I http://localhost:3000 || echo "Frontend not ready yet"
    
    - name: Run container resource check
      run: |
        echo "=== Container Status ==="
        docker-compose ps
        
        echo "=== Container Resource Usage ==="
        docker stats --no-stream
        
        echo "=== Container Logs (Last 20 lines) ==="
        docker-compose logs --tail=20
    
    - name: Test service communication
      run: |
        # Test database connectivity from backend
        docker-compose exec -T backend python -c "
        import psycopg2
        try:
            conn = psycopg2.connect(
                host='postgres',
                database='lma_db', 
                user='lma_user',
                password='lma_password'
            )
            print('✅ Backend -> PostgreSQL connection successful')
            conn.close()
        except Exception as e:
            print(f'❌ Backend -> PostgreSQL connection failed: {e}')
            exit(1)
        "
        
        # Test Redis connectivity from backend
        docker-compose exec -T backend python -c "
        import redis
        try:
            r = redis.Redis(host='redis', port=6379, db=0)
            r.ping()
            print('✅ Backend -> Redis connection successful')
        except Exception as e:
            print(f'❌ Backend -> Redis connection failed: {e}')
            exit(1)
        "
    
    - name: Cleanup
      if: always()
      run: |
        docker-compose down
        docker system prune -f

  security-baseline:
    name: Docker Security Baseline
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Docker security scan
      run: |
        # Install docker-bench-security
        git clone https://github.com/docker/docker-bench-security.git
        cd docker-bench-security
        sudo sh docker-bench-security.sh
    
    - name: Scan Docker images for vulnerabilities
      run: |
        # Build images first
        docker build -t lma-backend ./backend
        docker build -t lma-frontend ./frontend
        
        # Install and run trivy
        curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
        
        echo "=== Backend Image Scan ==="
        trivy image lma-backend
        
        echo "=== Frontend Image Scan ==="
        trivy image lma-frontend
        
        echo "=== Base Images Scan ==="
        trivy image postgres:15-alpine
        trivy image redis:7-alpine
        trivy image n8nio/n8n:latest 