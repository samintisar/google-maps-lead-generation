name: Pull Request Validation

on:
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened]

jobs:
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Shallow clones should be disabled for better analysis
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: './frontend/package-lock.json'
    
    - name: Install Python dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install black isort flake8 mypy bandit safety
    
    - name: Install Node dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Python code formatting check (Black)
      working-directory: ./backend
      run: black --check --diff .
    
    - name: Python import sorting check (isort)
      working-directory: ./backend
      run: isort --check-only --diff .
    
    - name: Python linting (Flake8)
      working-directory: ./backend
      run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
    
    - name: Python type checking (MyPy)
      working-directory: ./backend
      run: mypy . --ignore-missing-imports
    
    - name: Python security check (Bandit)
      working-directory: ./backend
      run: bandit -r . -x tests/
    
    - name: Python dependency security check (Safety)
      working-directory: ./backend
      run: safety check --json
    
    - name: Frontend linting (ESLint)
      working-directory: ./frontend
      run: npm run lint
    
    - name: Frontend type checking
      working-directory: ./frontend
      run: npm run check
    
    - name: Frontend formatting check (Prettier)
      working-directory: ./frontend
      run: npm run format:check

  dockerfile-lint:
    name: Dockerfile Linting
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Lint Backend Dockerfile
      uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: ./backend/Dockerfile
        failure-threshold: warning
    
    - name: Lint Frontend Dockerfile
      uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: ./frontend/Dockerfile
        failure-threshold: warning

  docker-compose-validate:
    name: Docker Compose Validation
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Validate docker-compose.yml
      run: |
        docker-compose config
        docker-compose -f docker-compose.prod.yml config
    
    - name: Build images only (no push)
      run: |
        docker-compose build
        docker images

  api-contract-test:
    name: API Contract Testing
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: test_lma_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio httpx
    
    - name: Run API contract tests
      working-directory: ./backend
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_lma_db
        ENVIRONMENT: testing
      run: |
        # Start FastAPI server in background
        uvicorn main:app --host 0.0.0.0 --port 8000 &
        sleep 5
        
        # Run API tests
        pytest tests/test_api_contracts.py -v

  security-scan:
    name: Security Analysis
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Run CodeQL Analysis
      uses: github/codeql-action/init@v2
      with:
        languages: python, javascript
    
    - name: Autobuild
      uses: github/codeql-action/autobuild@v2
    
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  pr-size-check:
    name: PR Size Check
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Check PR size
      run: |
        # Count changed lines
        CHANGED_LINES=$(git diff --numstat origin/main...HEAD | awk '{sum += $1 + $2} END {print sum}')
        echo "Changed lines: $CHANGED_LINES"
        
        if [ "$CHANGED_LINES" -gt 1000 ]; then
          echo "⚠️ Large PR detected ($CHANGED_LINES lines changed)"
          echo "Consider breaking this into smaller PRs for easier review"
          exit 1
        else
          echo "✅ PR size is reasonable"
        fi 