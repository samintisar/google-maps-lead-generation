{
  "name": "CRM Lead Synchronization (API Version)",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "cronExpression",
              "expression": "0 */15 * * *"
            }
          ]
        }
      },
      "name": "CRM Sync Schedule (Every 15 min)",
      "type": "n8n-nodes-base.cron",
      "typeVersion": 1,
      "position": [
        200,
        400
      ],
      "id": "sync-schedule"
    },
    {
      "parameters": {},
      "name": "Manual Trigger",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        200,
        280
      ],
      "id": "manual-trigger"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "crm-webhook",
        "responseMode": "responseNode",
        "options": {}
      },
      "name": "CRM Webhook Receiver",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        200,
        520
      ],
      "webhookId": "crm-webhook-receiver",
      "id": "crm-webhook"
    },
    {
      "parameters": {
        "url": "http://backend:8000/api/workflows/leads/crm-sync?limit=50",
        "authentication": "genericCredentialType",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "options": {},
        "genericAuthType": "httpHeaderAuth"
      },
      "name": "Get Unsynced Leads",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        420,
        340
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "oiDt5Ri93QZxjGEm",
          "name": "Header Auth account"
        }
      },
      "id": "get-unsynced-leads-api"
    },
    {
      "parameters": {
        "conditions": {
          "number": [
            {
              "value1": "={{$json.data.length}}",
              "operation": "larger",
              "value2": 0
            }
          ]
        }
      },
      "name": "Check If Leads Exist",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        640,
        340
      ],
      "id": "check-leads-exist"
    },
    {
      "parameters": {
        "jsCode": "// Transform leads for CRM format\nconst leads = $input.all();\nconst formattedLeads = [];\n\nfor (const leadData of leads) {\n  const leadArray = leadData.json.data || [leadData.json];\n  \n  for (const lead of leadArray) {\n    // Skip if already an array element\n    if (Array.isArray(lead)) {\n      for (const singleLead of lead) {\n        formattedLeads.push(formatLeadForCRM(singleLead));\n      }\n    } else {\n      formattedLeads.push(formatLeadForCRM(lead));\n    }\n  }\n}\n\nfunction formatLeadForCRM(lead) {\n  return {\n    json: {\n      // CRM format mapping\n      firstName: lead.first_name,\n      lastName: lead.last_name,\n      email: lead.email,\n      company: lead.company,\n      phone: lead.phone,\n      source: lead.source,\n      status: lead.status,\n      score: lead.score,\n      \n      // Custom fields for CRM\n      customFields: {\n        lma_id: lead.id,\n        lead_temperature: lead.lead_temperature,\n        last_activity: lead.updated_at,\n        tags: lead.tags || []\n      },\n      \n      // Original data for reference\n      original_lead: lead,\n      \n      // Metadata\n      createdAt: lead.created_at,\n      updatedAt: lead.updated_at,\n      sync_timestamp: new Date().toISOString()\n    }\n  };\n}\n\nreturn formattedLeads;"
      },
      "name": "Format for CRM",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        860,
        260
      ],
      "id": "format-for-crm"
    },
    {
      "parameters": {
        "resource": "contact",
        "operation": "upsert",
        "properties": {
          "email": "={{$json.email}}",
          "firstname": "={{$json.firstName}}",
          "lastname": "={{$json.lastName}}",
          "company": "={{$json.company}}",
          "phone": "={{$json.phone}}",
          "lifecyclestage": "lead",
          "lead_status": "={{$json.status}}",
          "hs_lead_status": "={{$json.status}}"
        },
        "additionalFields": {
          "customProperties": {
            "property": [
              {
                "name": "lma_lead_id",
                "value": "={{$json.customFields.lma_id}}"
              },
              {
                "name": "lead_score",
                "value": "={{$json.score}}"
              },
              {
                "name": "lead_source_detail",
                "value": "={{$json.source}}"
              },
              {
                "name": "lead_temperature",
                "value": "={{$json.customFields.lead_temperature}}"
              }
            ]
          }
        }
      },
      "name": "Sync to HubSpot",
      "type": "n8n-nodes-base.hubspot",
      "typeVersion": 1,
      "position": [
        1080,
        180
      ],
      "credentials": {
        "hubspotApi": {
          "id": "3",
          "name": "HubSpot CRM"
        }
      },
      "id": "sync-to-hubspot"
    },
    {
      "parameters": {
        "resource": "lead",
        "operation": "create",
        "firstName": "={{$json.firstName}}",
        "lastName": "={{$json.lastName}}",
        "email": "={{$json.email}}",
        "additionalFields": {
          "company": "={{$json.company}}",
          "phone": "={{$json.phone}}",
          "leadSource": "={{$json.source}}",
          "status": "={{$json.status}}",
          "rating": "={{$json.customFields.lead_temperature}}",
          "customFields": {
            "LMA_Lead_ID__c": "={{$json.customFields.lma_id}}",
            "Lead_Score__c": "={{$json.score}}",
            "Last_LMA_Activity__c": "={{$json.customFields.last_activity}}"
          }
        }
      },
      "name": "Sync to Salesforce",
      "type": "n8n-nodes-base.salesforce",
      "typeVersion": 1,
      "position": [
        1080,
        340
      ],
      "credentials": {
        "salesforceOAuth2Api": {
          "id": "4",
          "name": "Salesforce CRM"
        }
      },
      "id": "sync-to-salesforce"
    },
    {
      "parameters": {
        "jsCode": "// Collect sync results from all CRM operations\nconst allInputs = $input.all();\nconst syncResults = [];\n\nfor (const input of allInputs) {\n  const data = input.json;\n  \n  // Determine CRM type and extract relevant IDs\n  let crmType, crmId;\n  \n  if (data.id && typeof data.id === 'string') {\n    // HubSpot contact ID\n    crmType = 'hubspot';\n    crmId = data.id;\n  } else if (data.Id) {\n    // Salesforce lead ID\n    crmType = 'salesforce';\n    crmId = data.Id;\n  } else {\n    // Fallback\n    crmType = 'unknown';\n    crmId = 'unknown';\n  }\n  \n  // Extract original lead data\n  const originalLead = data.original_lead || data;\n  \n  syncResults.push({\n    json: {\n      id: originalLead.id,\n      crm_type: crmType,\n      crm_id: crmId,\n      sync_status: 'synced',\n      synced_at: new Date().toISOString(),\n      original_data: originalLead\n    }\n  });\n}\n\nreturn syncResults;"
      },
      "name": "Collect Sync Results",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1300,
        260
      ],
      "id": "collect-sync-results"
    },
    {
      "parameters": {
        "url": "http://backend:8000/api/workflows/leads/crm-sync",
        "authentication": "genericCredentialType",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "sync_updates",
              "value": "={{JSON.stringify($input.all().map(item => item.json))}}"
            }
          ]
        },
        "options": {},
        "genericAuthType": "httpHeaderAuth"
      },
      "name": "Update Sync Status",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        1520,
        260
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "oiDt5Ri93QZxjGEm",
          "name": "Header Auth account"
        }
      },
      "id": "update-sync-status-api"
    },
    {
      "parameters": {
        "jsCode": "// Process incoming CRM webhook data\nconst webhookData = $json;\nlet processedData = {};\n\n// Handle different CRM webhook formats\nif (webhookData.subscriptionType) {\n  // HubSpot webhook format\n  processedData = {\n    crmType: 'hubspot',\n    leadId: webhookData.objectId,\n    changeType: webhookData.changeType,\n    email: webhookData.email,\n    firstName: webhookData.firstName,\n    lastName: webhookData.lastName,\n    company: webhookData.company,\n    status: webhookData.hs_lead_status,\n    updatedAt: new Date().toISOString(),\n    webhook_received_at: new Date().toISOString()\n  };\n} else if (webhookData.sobject) {\n  // Salesforce webhook format\n  const sobject = webhookData.sobject;\n  processedData = {\n    crmType: 'salesforce',\n    leadId: sobject.Id,\n    changeType: 'updated',\n    email: sobject.Email,\n    firstName: sobject.FirstName,\n    lastName: sobject.LastName,\n    company: sobject.Company,\n    status: sobject.Status,\n    updatedAt: sobject.LastModifiedDate,\n    webhook_received_at: new Date().toISOString()\n  };\n} else {\n  // Generic webhook format\n  processedData = {\n    crmType: webhookData.crmType || 'unknown',\n    leadId: webhookData.leadId || webhookData.objectId || webhookData.id,\n    changeType: webhookData.changeType || 'updated',\n    email: webhookData.email,\n    firstName: webhookData.firstName || webhookData.first_name,\n    lastName: webhookData.lastName || webhookData.last_name,\n    company: webhookData.company,\n    status: webhookData.status,\n    updatedAt: new Date().toISOString(),\n    webhook_received_at: new Date().toISOString()\n  };\n}\n\nreturn { json: processedData };"
      },
      "name": "Process CRM Webhook",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        420,
        520
      ],
      "id": "process-crm-webhook"
    },
    {
      "parameters": {
        "url": "=http://backend:8000/api/workflows/webhook/crm-update",
        "authentication": "genericCredentialType",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "crmType",
              "value": "={{$json.crmType}}"
            },
            {
              "name": "leadId",
              "value": "={{$json.leadId}}"
            },
            {
              "name": "email",
              "value": "={{$json.email}}"
            },
            {
              "name": "firstName",
              "value": "={{$json.firstName}}"
            },
            {
              "name": "lastName",
              "value": "={{$json.lastName}}"
            },
            {
              "name": "company",
              "value": "={{$json.company}}"
            },
            {
              "name": "status",
              "value": "={{$json.status}}"
            },
            {
              "name": "changeType",
              "value": "={{$json.changeType}}"
            }
          ]
        },
        "options": {},
        "genericAuthType": "httpHeaderAuth"
      },
      "name": "Update Lead from CRM",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        640,
        520
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "oiDt5Ri93QZxjGEm",
          "name": "Header Auth account"
        }
      },
      "id": "update-lead-from-crm-api"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "{\n  \"status\": \"success\",\n  \"message\": \"CRM webhook processed\",\n  \"leadId\": \"{{$json.leadId}}\",\n  \"crmType\": \"{{$json.crmType}}\",\n  \"processedAt\": \"{{$now.toISO()}}\"\n}"
      },
      "name": "Return Webhook Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        860,
        520
      ],
      "id": "return-webhook-response"
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$json.data.updated_leads.length}}",
              "operation": "isNotEmpty"
            }
          ]
        }
      },
      "name": "Check Sync Success",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        1740,
        260
      ],
      "id": "check-sync-success"
    },
    {
      "parameters": {
        "subject": "CRM Sync Report - {{$json.data.summary.successful_updates}} leads synced",
        "emailType": "html",
        "html": "<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"utf-8\">\n  <title>CRM Sync Report</title>\n</head>\n<body style=\"font-family: Arial, sans-serif; line-height: 1.6; color: #333;\">\n  <div style=\"max-width: 600px; margin: 0 auto; padding: 20px;\">\n    <h1 style=\"color: #2c3e50;\">CRM Synchronization Report</h1>\n    \n    <div style=\"background-color: #e8f5e8; padding: 20px; border-radius: 5px; margin: 20px 0; border-left: 4px solid #28a745;\">\n      <h3 style=\"margin-top: 0; color: #155724;\">Sync Summary:</h3>\n      <ul style=\"margin-bottom: 0;\">\n        <li><strong>Successfully Synced:</strong> {{$json.data.summary.successful_updates}} leads</li>\n        <li><strong>Failed Syncs:</strong> {{$json.data.summary.failed_updates}} leads</li>\n        <li><strong>Total Processed:</strong> {{$json.data.summary.total_processed}} leads</li>\n        <li><strong>Sync Time:</strong> {{$now.toISO()}}</li>\n      </ul>\n    </div>\n    \n    {{#if $json.data.failed_updates.length}}\n    <div style=\"background-color: #f8d7da; padding: 20px; border-radius: 5px; margin: 20px 0; border-left: 4px solid #dc3545;\">\n      <h3 style=\"margin-top: 0; color: #721c24;\">Failed Syncs:</h3>\n      <ul>\n        {{#each $json.data.failed_updates}}\n        <li>Lead ID {{this.lead_id}}: {{this.error}}</li>\n        {{/each}}\n      </ul>\n    </div>\n    {{/if}}\n    \n    <p>CRM synchronization completed successfully. All active leads have been updated in the external CRM systems.</p>\n    \n    <p>Best regards,<br>\n    LMA Automation System</p>\n  </div>\n</body>\n</html>",
        "toEmail": "admin@leadmanagement.com",
        "fromEmail": "automation@leadmanagement.com",
        "fromName": "LMA CRM Sync"
      },
      "name": "Send Sync Report",
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 2,
      "position": [
        1960,
        180
      ],
      "credentials": {
        "smtp": {
          "id": "2",
          "name": "SMTP Email"
        }
      },
      "id": "send-sync-report"
    }
  ],
  "connections": {
    "CRM Sync Schedule (Every 15 min)": {
      "main": [
        [
          {
            "node": "Get Unsynced Leads",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Manual Trigger": {
      "main": [
        [
          {
            "node": "Get Unsynced Leads",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "CRM Webhook Receiver": {
      "main": [
        [
          {
            "node": "Process CRM Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Unsynced Leads": {
      "main": [
        [
          {
            "node": "Check If Leads Exist",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check If Leads Exist": {
      "main": [
        [
          {
            "node": "Format for CRM",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format for CRM": {
      "main": [
        [
          {
            "node": "Sync to HubSpot",
            "type": "main",
            "index": 0
          },
          {
            "node": "Sync to Salesforce",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Sync to HubSpot": {
      "main": [
        [
          {
            "node": "Collect Sync Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Sync to Salesforce": {
      "main": [
        [
          {
            "node": "Collect Sync Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Collect Sync Results": {
      "main": [
        [
          {
            "node": "Update Sync Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Sync Status": {
      "main": [
        [
          {
            "node": "Check Sync Success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process CRM Webhook": {
      "main": [
        [
          {
            "node": "Update Lead from CRM",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Lead from CRM": {
      "main": [
        [
          {
            "node": "Return Webhook Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Sync Success": {
      "main": [
        [
          {
            "node": "Send Sync Report",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "timezone": "America/New_York"
  },
  "createdAt": "2024-01-15T10:30:00.000Z",
  "updatedAt": "2024-01-15T10:30:00.000Z",
  "id": "crm-sync-api",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "parameters": {
    "BACKEND_URL": {
      "displayName": "Backend URL",
      "name": "BACKEND_URL",
      "type": "string",
      "default": "http://192.168.1.106:8000",
      "description": "The base URL of your LMA backend API (e.g., http://192.168.1.106:8000)"
    }
  }
}