{
  "name": "My workflow",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "lead-activity",
        "responseMode": "responseNode",
        "options": {}
      },
      "name": "Lead Activity Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        300,
        4340
      ],
      "webhookId": "lead-activity-webhook",
      "id": "e8b479ae-909e-4d18-91a1-43d8e181901b"
    },
    {
      "parameters": {},
      "name": "Hourly Score Update",
      "type": "n8n-nodes-base.cron",
      "typeVersion": 1,
      "position": [
        300,
        4140
      ],
      "id": "7cf3f84b-0c04-47d5-946f-45d35c4a07e0"
    },
    {
      "parameters": {
        "jsCode": "// Advanced lead scoring algorithm with error handling\ntry {\n  const inputData = $input.all();\n  \n  // Always return at least one item to prevent workflow stops\n  if (!inputData || inputData.length === 0) {\n    return [{ json: { \n      error: \"No input data received\", \n      leads_processed: 0,\n      status: \"no_input\",\n      timestamp: new Date().toISOString()\n    } }];\n  }\n\n  const response = $input.first().json;\n  console.log('Raw response:', JSON.stringify(response, null, 2));\n  \n  // Multiple ways to extract leads data\n  let leads = [];\n  if (response && response.items) {\n    leads = response.items;\n  } else if (response && response.data) {\n    leads = response.data;\n  } else if (Array.isArray(response)) {\n    leads = response;\n  } else if (response) {\n    leads = [response];\n  }\n  \n  console.log('Extracted leads:', leads.length, 'items');\n  \n  if (!leads || leads.length === 0) {\n    return [{ json: { \n      message: \"No leads found to process\", \n      leads_processed: 0, \n      status: \"no_leads\",\n      raw_response: response,\n      timestamp: new Date().toISOString()\n    } }];\n  }\n\n  const scoredLeads = [];\n\n  for (const lead of leads) {\n  let score = 0;\n  let scoreBreakdown = {\n    demographic: 0,\n    behavioral: 0,\n    engagement: 0,\n    firmographic: 0,\n    temporal: 0\n  };\n  \n  // DEMOGRAPHIC SCORING (0-25 points)\n  if (lead.job_title) {\n    const title = lead.job_title.toLowerCase();\n    if (title.includes('ceo') || title.includes('founder') || title.includes('president')) {\n      scoreBreakdown.demographic += 25;\n    } else if (title.includes('vp') || title.includes('director') || title.includes('head')) {\n      scoreBreakdown.demographic += 20;\n    } else if (title.includes('manager') || title.includes('lead')) {\n      scoreBreakdown.demographic += 15;\n    } else {\n      scoreBreakdown.demographic += 10;\n    }\n  }\n  \n  // FIRMOGRAPHIC SCORING (0-25 points)\n  if (lead.company_size) {\n    if (lead.company_size >= 1000) scoreBreakdown.firmographic += 25;\n    else if (lead.company_size >= 100) scoreBreakdown.firmographic += 20;\n    else if (lead.company_size >= 50) scoreBreakdown.firmographic += 15;\n    else if (lead.company_size >= 10) scoreBreakdown.firmographic += 10;\n    else scoreBreakdown.firmographic += 5;\n  }\n  \n  // Industry scoring\n  if (lead.industry) {\n    const highValueIndustries = ['technology', 'saas', 'finance', 'healthcare', 'consulting'];\n    if (highValueIndustries.some(ind => lead.industry.toLowerCase().includes(ind))) {\n      scoreBreakdown.firmographic += 10;\n    }\n  }\n  \n  // BEHAVIORAL SCORING (0-30 points)\n  if (lead.website_visits) {\n    if (lead.website_visits >= 10) scoreBreakdown.behavioral += 15;\n    else if (lead.website_visits >= 5) scoreBreakdown.behavioral += 10;\n    else if (lead.website_visits >= 2) scoreBreakdown.behavioral += 5;\n  }\n  \n  if (lead.pages_viewed) {\n    if (lead.pages_viewed >= 20) scoreBreakdown.behavioral += 15;\n    else if (lead.pages_viewed >= 10) scoreBreakdown.behavioral += 10;\n    else if (lead.pages_viewed >= 5) scoreBreakdown.behavioral += 5;\n  }\n  \n  // ENGAGEMENT SCORING (0-20 points)\n  if (lead.email_opens) {\n    if (lead.email_opens >= 5) scoreBreakdown.engagement += 10;\n    else if (lead.email_opens >= 2) scoreBreakdown.engagement += 5;\n  }\n  \n  if (lead.email_clicks) {\n    if (lead.email_clicks >= 3) scoreBreakdown.engagement += 10;\n    else if (lead.email_clicks >= 1) scoreBreakdown.engagement += 5;\n  }\n  \n  if (lead.downloads) {\n    scoreBreakdown.engagement += Math.min(lead.downloads * 3, 10);\n  }\n  \n  // TEMPORAL SCORING - Recent activity bonus (0-10 points)\n  const now = new Date();\n  const lastActivity = new Date(lead.last_activity_at || lead.created_at);\n  const daysSinceActivity = (now - lastActivity) / (1000 * 60 * 60 * 24);\n  \n  if (daysSinceActivity <= 1) scoreBreakdown.temporal += 10;\n  else if (daysSinceActivity <= 3) scoreBreakdown.temporal += 7;\n  else if (daysSinceActivity <= 7) scoreBreakdown.temporal += 5;\n  else if (daysSinceActivity <= 14) scoreBreakdown.temporal += 3;\n  \n  // NEGATIVE SCORING\n  if (lead.unsubscribed) score -= 50;\n  if (lead.bounced_emails && lead.bounced_emails > 2) score -= 20;\n  if (daysSinceActivity > 90) score -= 20;\n  \n  // Calculate final score\n  score = Object.values(scoreBreakdown).reduce((sum, val) => sum + val, 0);\n  score = Math.max(0, Math.min(100, score)); // Cap between 0-100\n  \n  // Determine lead temperature\n  let temperature;\n  let nextAction;\n  \n  if (score >= 80) {\n    temperature = 'hot';\n    nextAction = 'immediate_sales_contact';\n  } else if (score >= 60) {\n    temperature = 'warm';\n    nextAction = 'personalized_follow_up';\n  } else {\n    temperature = 'cold';\n    nextAction = 'nurturing_sequence';\n  }\n  \n  scoredLeads.push({\n    ...lead,\n    previous_score: lead.score,\n    score: score,\n    score_breakdown: scoreBreakdown,\n    lead_temperature: temperature,\n    recommended_action: nextAction,\n    score_updated_at: now.toISOString(),\n    score_change: score - (lead.score || 0)\n  });\n  }\n\n  console.log('Processed', scoredLeads.length, 'leads');\n  return scoredLeads.map(lead => ({ json: lead }));\n  \n} catch (error) {\n  console.error('Error in lead scoring:', error);\n  return [{ json: { \n    error: error.message, \n    status: \"error\",\n    timestamp: new Date().toISOString()\n  } }];\n}"
      },
      "name": "Calculate Lead Scores",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        740,
        4240
      ],
      "id": "14f2efe2-dc5b-4ba3-b3ab-2a689c36a58d"
    },
    {
      "parameters": {
        "method": "PUT",
        "url": "={{ \"http://backend:8000/api/leads/\" + $json.id }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ {\n  \"lead_temperature\": $json.lead_temperature,\n  \"score\": $json.score,\n  \"score_breakdown\": $json.score_breakdown\n} }}",
        "options": {}
      },
      "name": "Update Lead Status",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        960,
        4240
      ],
      "id": "e573f60e-95c3-479d-8fd7-d4a7d1c1d291",
      "credentials": {
        "httpHeaderAuth": {
          "id": "oiDt5Ri93QZxjGEm",
          "name": "Header Auth account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$json.data.lead_temperature}}",
              "value2": "hot"
            }
          ]
        }
      },
      "name": "Is Hot Lead",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        1180,
        3940
      ],
      "id": "7c5364d5-67ee-48d4-89fc-7db673df5cd9"
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$json.data.lead_temperature}}",
              "value2": "warm"
            }
          ]
        }
      },
      "name": "Is Warm Lead",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        1180,
        4240
      ],
      "id": "5498432a-a9d8-4292-99cc-59b016b75e96"
    },
    {
      "parameters": {
        "url": "http://backend:8000/api/workflows/leads/social-outreach?temperature=hot&limit=5",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": []
        },
        "options": {}
      },
      "name": "Get Hot Leads for Outreach",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        1400,
        4040
      ],
      "id": "74ebed39-6593-44db-a1d8-b0391a286c5b",
      "credentials": {
        "httpHeaderAuth": {
          "id": "oiDt5Ri93QZxjGEm",
          "name": "Header Auth account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ \"http://backend:8000/api/workflows/leads/\" + $json.data.id + \"/social-outreach\" }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": []
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "outreach_type",
              "value": "email_alert"
            },
            {
              "name": "message_sent",
              "value": "true"
            },
            {
              "name": "status",
              "value": "sent"
            },
            {
              "name": "notes",
              "value": "={{ \"Sales team notified about warm lead (Score: \" + $json.data.score + \")\" }}"
            }
          ]
        },
        "options": {}
      },
      "name": "Log Sales Alert Activity",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        1400,
        4240
      ],
      "id": "84a645f5-bbdf-4446-a73f-e41cabf429e2",
      "credentials": {
        "httpHeaderAuth": {
          "id": "oiDt5Ri93QZxjGEm",
          "name": "Header Auth account"
        }
      }
    },
    {
      "parameters": {
        "url": "http://backend:8000/api/workflows/leads/crm-sync?limit=10",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": []
        },
        "options": {}
      },
      "name": "Get Leads for CRM Sync",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        1620,
        4140
      ],
      "id": "820fded4-2a3a-4b4e-b200-73124024022c",
      "credentials": {
        "httpHeaderAuth": {
          "id": "oiDt5Ri93QZxjGEm",
          "name": "Header Auth account"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ {\n  \"status\": \"success\",\n  \"message\": \"Lead scoring completed\",\n  \"processed_leads\": $('Calculate Lead Scores').all().length || 0,\n  \"updated_leads\": $('Update Lead Status').all().length || 0,\n  \"crm_sync_leads\": $('Get Leads for CRM Sync').all().length || 0,\n  \"actions_triggered\": [\"score_update\", \"status_update\", \"crm_sync\"],\n  \"workflow_execution\": \"complete\",\n  \"timestamp\": $now.toISO()\n} }}",
        "options": {}
      },
      "name": "Return Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        1840,
        4140
      ],
      "id": "5b481f2c-2cf6-4653-803a-d2811988ee78"
    },
    {
      "parameters": {
        "url": "http://backend:8000/api/leads/dev?test_scoring=true&limit=20",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": []
        },
        "options": {}
      },
      "name": "Get Leads for Scoring",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        520,
        4240
      ],
      "id": "a7df5cf2-8537-41a3-ae4b-aa639f513e61",
      "credentials": {
        "httpHeaderAuth": {
          "id": "oiDt5Ri93QZxjGEm",
          "name": "Header Auth account"
        }
      }
    },
    {
      "parameters": {
        "fromEmail": "admin@worklinesupply.co",
        "toEmail": "admin@worklinesupply.co",
        "subject": "Hot Lead Alert: {{$json.first_name}} {{$json.last_name}} (Score: {{$json.score}})",
        "text": "Hot lead detected!\n\nName: {{$json.first_name}} {{$json.last_name}}\nEmail: {{$json.email}}\nCompany: {{$json.company}}\nScore: {{$json.score}}/100\nTemperature: {{$json.lead_temperature}}\nRecommended Action: {{$json.recommended_action}}\n\nScore Breakdown:\n- Demographic: {{$json.score_breakdown.demographic}}\n- Behavioral: {{$json.score_breakdown.behavioral}}\n- Engagement: {{$json.score_breakdown.engagement}}\n- Firmographic: {{$json.score_breakdown.firmographic}}\n- Temporal: {{$json.score_breakdown.temporal}}\n\nPlease contact this lead immediately.",
        "options": {}
      },
      "name": "Send Sales Alert Email",
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 2,
      "position": [
        1400,
        3840
      ],
      "id": "40a36e6d-60c6-44ec-9836-7f825bca837b",
      "webhookId": "0f821493-aaae-4b5a-862c-6d8c4f8f4b33",
      "credentials": {
        "smtp": {
          "id": "oUUb1YUXYrAx2yyo",
          "name": "SMTP account"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$json.data.lead_temperature}}",
              "value2": "cold"
            }
          ]
        }
      },
      "name": "Is Cold Lead1",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        1400,
        4440
      ],
      "id": "a5765bda-a043-4fef-bc87-cda3a78b37c6"
    }
  ],
  "pinData": {},
  "connections": {
    "Lead Activity Webhook": {
      "main": [
        [
          {
            "node": "Get Leads for Scoring",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Hourly Score Update": {
      "main": [
        [
          {
            "node": "Get Leads for Scoring",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Calculate Lead Scores": {
      "main": [
        [
          {
            "node": "Update Lead Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Lead Status": {
      "main": [
        [
          {
            "node": "Is Hot Lead",
            "type": "main",
            "index": 0
          },
          {
            "node": "Is Warm Lead",
            "type": "main",
            "index": 0
          },
          {
            "node": "Is Cold Lead1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Is Hot Lead": {
      "main": [
        [
          {
            "node": "Get Hot Leads for Outreach",
            "type": "main",
            "index": 0
          },
          {
            "node": "Send Sales Alert Email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Is Warm Lead": {
      "main": [
        [
          {
            "node": "Log Sales Alert Activity",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Hot Leads for Outreach": {
      "main": [
        [
          {
            "node": "Get Leads for CRM Sync",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Log Sales Alert Activity": {
      "main": [
        [
          {
            "node": "Get Leads for CRM Sync",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Leads for CRM Sync": {
      "main": [
        [
          {
            "node": "Return Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Leads for Scoring": {
      "main": [
        [
          {
            "node": "Calculate Lead Scores",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Sales Alert Email": {
      "main": [
        [
          {
            "node": "Get Leads for CRM Sync",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Is Cold Lead1": {
      "main": [
        [
          {
            "node": "Get Leads for CRM Sync",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "01c2da07-66c3-40cd-ad41-1c066685ff6c",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "e6a1a37609b3da311eebf03d0e0fc477b422f347511e16f7ec3b973c5186e52a"
  },
  "id": "QiwtxVyIFCs1tCXf",
  "tags": [
    {
      "createdAt": "2025-06-08T07:56:51.662Z",
      "updatedAt": "2025-06-08T07:56:51.662Z",
      "id": "WSlnTdHC1OcET5c6",
      "name": "Lead Scoring"
    },
    {
      "createdAt": "2025-06-08T07:56:51.676Z",
      "updatedAt": "2025-06-08T07:56:51.676Z",
      "id": "M47igSPAFrLx9Fsf",
      "name": "Automation"
    }
  ]
}