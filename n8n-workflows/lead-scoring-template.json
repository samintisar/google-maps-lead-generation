{
  "name": "Automated Lead Scoring & Qualification",
  "meta": {
    "templateId": "lead-scoring-automation",
    "templateCredsSetupCompleted": false
  },
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "lead-activity",
        "responseMode": "responseNode",
        "options": {}
      },
      "name": "Lead Activity Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [200, 300],
      "webhookId": "lead-activity-scoring",
      "id": "activity-webhook"
    },
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyHour"
            }
          ]
        }
      },
      "name": "Hourly Score Update",
      "type": "n8n-nodes-base.cron",
      "typeVersion": 1,
      "position": [200, 480],
      "id": "hourly-cron"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT * FROM leads WHERE updated_at >= NOW() - INTERVAL '24 hours' OR score_last_updated IS NULL OR score_last_updated < NOW() - INTERVAL '7 days'"
      },
      "name": "Get Leads for Scoring",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [420, 480],
      "credentials": {
        "postgres": {
          "id": "1",
          "name": "LMA Database"
        }
      },
      "id": "get-leads"
    },
    {
      "parameters": {
        "jsCode": "// Advanced lead scoring algorithm\nconst leads = $input.all();\nconst scoredLeads = [];\n\nfor (const leadItem of leads) {\n  const lead = leadItem.json;\n  let score = 0;\n  let scoreBreakdown = {\n    demographic: 0,\n    behavioral: 0,\n    engagement: 0,\n    firmographic: 0,\n    temporal: 0\n  };\n  \n  // DEMOGRAPHIC SCORING (0-25 points)\n  if (lead.job_title) {\n    const title = lead.job_title.toLowerCase();\n    if (title.includes('ceo') || title.includes('founder') || title.includes('president')) {\n      scoreBreakdown.demographic += 25;\n    } else if (title.includes('vp') || title.includes('director') || title.includes('head')) {\n      scoreBreakdown.demographic += 20;\n    } else if (title.includes('manager') || title.includes('lead')) {\n      scoreBreakdown.demographic += 15;\n    } else {\n      scoreBreakdown.demographic += 10;\n    }\n  }\n  \n  // FIRMOGRAPHIC SCORING (0-25 points)\n  if (lead.company_size) {\n    if (lead.company_size >= 1000) scoreBreakdown.firmographic += 25;\n    else if (lead.company_size >= 100) scoreBreakdown.firmographic += 20;\n    else if (lead.company_size >= 50) scoreBreakdown.firmographic += 15;\n    else if (lead.company_size >= 10) scoreBreakdown.firmographic += 10;\n    else scoreBreakdown.firmographic += 5;\n  }\n  \n  // Industry scoring\n  if (lead.industry) {\n    const highValueIndustries = ['technology', 'saas', 'finance', 'healthcare', 'consulting'];\n    if (highValueIndustries.some(ind => lead.industry.toLowerCase().includes(ind))) {\n      scoreBreakdown.firmographic += 10;\n    }\n  }\n  \n  // BEHAVIORAL SCORING (0-30 points)\n  if (lead.website_visits) {\n    if (lead.website_visits >= 10) scoreBreakdown.behavioral += 15;\n    else if (lead.website_visits >= 5) scoreBreakdown.behavioral += 10;\n    else if (lead.website_visits >= 2) scoreBreakdown.behavioral += 5;\n  }\n  \n  if (lead.pages_viewed) {\n    if (lead.pages_viewed >= 20) scoreBreakdown.behavioral += 15;\n    else if (lead.pages_viewed >= 10) scoreBreakdown.behavioral += 10;\n    else if (lead.pages_viewed >= 5) scoreBreakdown.behavioral += 5;\n  }\n  \n  // ENGAGEMENT SCORING (0-20 points)\n  if (lead.email_opens) {\n    if (lead.email_opens >= 5) scoreBreakdown.engagement += 10;\n    else if (lead.email_opens >= 2) scoreBreakdown.engagement += 5;\n  }\n  \n  if (lead.email_clicks) {\n    if (lead.email_clicks >= 3) scoreBreakdown.engagement += 10;\n    else if (lead.email_clicks >= 1) scoreBreakdown.engagement += 5;\n  }\n  \n  if (lead.downloads) {\n    scoreBreakdown.engagement += Math.min(lead.downloads * 3, 10);\n  }\n  \n  // TEMPORAL SCORING - Recent activity bonus (0-10 points)\n  const now = new Date();\n  const lastActivity = new Date(lead.last_activity_at || lead.created_at);\n  const daysSinceActivity = (now - lastActivity) / (1000 * 60 * 60 * 24);\n  \n  if (daysSinceActivity <= 1) scoreBreakdown.temporal += 10;\n  else if (daysSinceActivity <= 3) scoreBreakdown.temporal += 7;\n  else if (daysSinceActivity <= 7) scoreBreakdown.temporal += 5;\n  else if (daysSinceActivity <= 14) scoreBreakdown.temporal += 3;\n  \n  // NEGATIVE SCORING\n  if (lead.unsubscribed) score -= 50;\n  if (lead.bounced_emails && lead.bounced_emails > 2) score -= 20;\n  if (daysSinceActivity > 90) score -= 20;\n  \n  // Calculate final score\n  score = Object.values(scoreBreakdown).reduce((sum, val) => sum + val, 0);\n  score = Math.max(0, Math.min(100, score)); // Cap between 0-100\n  \n  // Determine lead temperature\n  let temperature;\n  let nextAction;\n  \n  if (score >= 80) {\n    temperature = 'hot';\n    nextAction = 'immediate_sales_contact';\n  } else if (score >= 60) {\n    temperature = 'warm';\n    nextAction = 'personalized_follow_up';\n  } else if (score >= 40) {\n    temperature = 'cold';\n    nextAction = 'nurturing_sequence';\n  } else {\n    temperature = 'frozen';\n    nextAction = 're_engagement_campaign';\n  }\n  \n  scoredLeads.push({\n    json: {\n      ...lead,\n      previous_score: lead.score,\n      score: score,\n      score_breakdown: scoreBreakdown,\n      lead_temperature: temperature,\n      recommended_action: nextAction,\n      score_updated_at: now.toISOString(),\n      score_change: score - (lead.score || 0)\n    }\n  });\n}\n\nreturn scoredLeads;"
      },
      "name": "Calculate Lead Scores",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [640, 400],
      "id": "calculate-scores"
    },
    {
      "parameters": {
        "conditions": {
          "number": [
            {
              "value1": "={{$json.score_change}}",
              "operation": "largerEqual",
              "value2": 10
            }
          ]
        }
      },
      "name": "Significant Score Change",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [860, 400],
      "id": "score-change-check"
    },
    {
      "parameters": {
        "operation": "update",
        "table": "leads",
        "updateKey": "id",
        "columns": "score,lead_temperature,score_breakdown,score_last_updated",
        "additionalFields": {}
      },
      "name": "Update Lead Score",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [1080, 300],
      "credentials": {
        "postgres": {
          "id": "1",
          "name": "LMA Database"
        }
      },
      "id": "update-score"
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$json.lead_temperature}}",
              "operation": "equal",
              "value2": "hot"
            }
          ]
        }
      },
      "name": "Is Hot Lead",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [1300, 220],
      "id": "hot-lead-check"
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$json.lead_temperature}}",
              "operation": "equal",
              "value2": "warm"
            }
          ]
        }
      },
      "name": "Is Warm Lead",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [1300, 380],
      "id": "warm-lead-check"
    },
    {
      "parameters": {
        "body": "{\n  \"lead_id\": {{$json.id}},\n  \"name\": \"{{$json.first_name}} {{$json.last_name}}\",\n  \"email\": \"{{$json.email}}\",\n  \"company\": \"{{$json.company}}\",\n  \"score\": {{$json.score}},\n  \"temperature\": \"{{$json.lead_temperature}}\",\n  \"score_breakdown\": {{JSON.stringify($json.score_breakdown)}},\n  \"priority\": \"high\",\n  \"created_at\": \"{{$now.toISO()}}\"\n}",
        "url": "http://backend:8000/api/sales-alerts/hot-lead",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "httpMethod": "POST"
      },
      "name": "Notify Sales Team",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1520, 140],
      "credentials": {
        "httpHeaderAuth": {
          "id": "5",
          "name": "Backend API"
        }
      },
      "id": "notify-sales"
    },
    {
      "parameters": {
        "body": "{\n  \"workflow_name\": \"personalized_follow_up\",\n  \"lead_id\": {{$json.id}},\n  \"trigger_data\": {\n    \"score\": {{$json.score}},\n    \"temperature\": \"{{$json.lead_temperature}}\",\n    \"recommended_action\": \"{{$json.recommended_action}}\"\n  }\n}",
        "url": "http://backend:8000/api/workflows/lead/{{$json.id}}/auto-assign",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "httpMethod": "POST"
      },
      "name": "Trigger Follow-up Workflow",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1520, 300],
      "credentials": {
        "httpHeaderAuth": {
          "id": "5",
          "name": "Backend API"
        }
      },
      "id": "trigger-followup"
    },
    {
      "parameters": {
        "operation": "create",
        "table": "activity_logs",
        "columns": "lead_id,activity_type,activity_data,created_at",
        "additionalFields": {}
      },
      "name": "Log Scoring Activity",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [1740, 220],
      "credentials": {
        "postgres": {
          "id": "1",
          "name": "LMA Database"
        }
      },
      "id": "log-activity"
    },
    {
      "parameters": {
        "subject": "ðŸ”¥ Hot Lead Alert: {{$json.first_name}} {{$json.last_name}} (Score: {{$json.score}})",
        "emailType": "html",
        "html": "<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"utf-8\">\n  <title>Hot Lead Alert</title>\n</head>\n<body style=\"font-family: Arial, sans-serif; line-height: 1.6; color: #333;\">\n  <div style=\"max-width: 600px; margin: 0 auto; padding: 20px;\">\n    <div style=\"background: linear-gradient(135deg, #ff6b35, #f7931e); color: white; padding: 20px; border-radius: 10px; text-align: center; margin-bottom: 20px;\">\n      <h1 style=\"margin: 0; font-size: 24px;\">ðŸ”¥ HOT LEAD ALERT ðŸ”¥</h1>\n      <p style=\"margin: 10px 0 0 0; font-size: 18px;\">Score: {{$json.score}}/100</p>\n    </div>\n    \n    <div style=\"background-color: #f8f9fa; padding: 20px; border-radius: 8px; margin-bottom: 20px;\">\n      <h2 style=\"margin-top: 0; color: #2c3e50;\">Lead Details</h2>\n      <table style=\"width: 100%; border-collapse: collapse;\">\n        <tr><td style=\"padding: 8px; font-weight: bold;\">Name:</td><td style=\"padding: 8px;\">{{$json.first_name}} {{$json.last_name}}</td></tr>\n        <tr style=\"background-color: #fff;\"><td style=\"padding: 8px; font-weight: bold;\">Email:</td><td style=\"padding: 8px;\">{{$json.email}}</td></tr>\n        <tr><td style=\"padding: 8px; font-weight: bold;\">Company:</td><td style=\"padding: 8px;\">{{$json.company}}</td></tr>\n        <tr style=\"background-color: #fff;\"><td style=\"padding: 8px; font-weight: bold;\">Job Title:</td><td style=\"padding: 8px;\">{{$json.job_title}}</td></tr>\n        <tr><td style=\"padding: 8px; font-weight: bold;\">Phone:</td><td style=\"padding: 8px;\">{{$json.phone}}</td></tr>\n      </table>\n    </div>\n    \n    <div style=\"background-color: #e8f5e8; padding: 20px; border-radius: 8px; border-left: 4px solid #28a745; margin-bottom: 20px;\">\n      <h3 style=\"margin-top: 0; color: #155724;\">Score Breakdown</h3>\n      <p><strong>Demographic:</strong> {{$json.score_breakdown.demographic}}/25</p>\n      <p><strong>Firmographic:</strong> {{$json.score_breakdown.firmographic}}/25</p>\n      <p><strong>Behavioral:</strong> {{$json.score_breakdown.behavioral}}/30</p>\n      <p><strong>Engagement:</strong> {{$json.score_breakdown.engagement}}/20</p>\n      <p><strong>Recent Activity:</strong> {{$json.score_breakdown.temporal}}/10</p>\n    </div>\n    \n    <div style=\"text-align: center; margin: 30px 0;\">\n      <a href=\"http://localhost:5173/leads/{{$json.id}}\" style=\"background-color: #007bff; color: white; padding: 15px 30px; text-decoration: none; border-radius: 5px; display: inline-block; font-size: 16px;\">View Lead Profile</a>\n    </div>\n    \n    <p style=\"color: #666; font-size: 12px; text-align: center;\">Recommended Action: {{$json.recommended_action}}</p>\n  </div>\n</body>\n</html>",
        "toEmail": "sales-team@leadmanagement.com",
        "fromEmail": "alerts@leadmanagement.com",
        "fromName": "LMA Lead Scoring System"
      },
      "name": "Send Sales Alert Email",
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 2,
      "position": [1520, 60],
      "credentials": {
        "smtp": {
          "id": "2",
          "name": "SMTP Email"
        }
      },
      "id": "send-alert-email"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "{\n  \"status\": \"success\",\n  \"message\": \"Lead scoring completed\",\n  \"processed_leads\": {{$json.length || 1}},\n  \"score\": {{$json.score}},\n  \"temperature\": \"{{$json.lead_temperature}}\",\n  \"actions_triggered\": [\"score_update\", \"{{$json.recommended_action}}\"],\n  \"timestamp\": \"{{$now.toISO()}}\"\n}"
      },
      "name": "Return Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1960, 220],
      "id": "return-response"
    }
  ],
  "connections": {
    "Lead Activity Webhook": {
      "main": [
        [
          {
            "node": "Calculate Lead Scores",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Hourly Score Update": {
      "main": [
        [
          {
            "node": "Get Leads for Scoring",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Leads for Scoring": {
      "main": [
        [
          {
            "node": "Calculate Lead Scores",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Calculate Lead Scores": {
      "main": [
        [
          {
            "node": "Significant Score Change",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Significant Score Change": {
      "main": [
        [
          {
            "node": "Update Lead Score",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Update Lead Score",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Lead Score": {
      "main": [
        [
          {
            "node": "Is Hot Lead",
            "type": "main",
            "index": 0
          },
          {
            "node": "Is Warm Lead",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Is Hot Lead": {
      "main": [
        [
          {
            "node": "Send Sales Alert Email",
            "type": "main",
            "index": 0
          },
          {
            "node": "Notify Sales Team",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    },
    "Is Warm Lead": {
      "main": [
        [
          {
            "node": "Trigger Follow-up Workflow",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    },
    "Notify Sales Team": {
      "main": [
        [
          {
            "node": "Log Scoring Activity",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Trigger Follow-up Workflow": {
      "main": [
        [
          {
            "node": "Log Scoring Activity",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Sales Alert Email": {
      "main": [
        [
          {
            "node": "Log Scoring Activity",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Log Scoring Activity": {
      "main": [
        [
          {
            "node": "Return Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "timezone": "America/New_York",
    "saveManualExecutions": true,
    "callerPolicy": "workflowsFromSameOwner",
    "errorWorkflow": ""
  },
  "staticData": null,
  "tags": [
    {
      "id": "lead-scoring",
      "name": "Lead Scoring"
    },
    {
      "id": "qualification",
      "name": "Lead Qualification"
    },
    {
      "id": "automation",
      "name": "Sales Automation"
    }
  ],
  "triggerCount": 2,
  "updatedAt": "2024-01-15T10:30:00.000Z",
  "versionId": "1"
} 